! This is a WIP and documentation needs to be further extended. !

= Module folder =
Folder has to have the module name, all lowercase, no spaces. Ex: "sample_module"

= Module class =
The file named "module.php" will be loaded automatically when activated and must be situated in the root of the folder.
Class will be instantiated and must be named after the following nomenclature:
	Module_(module_name)
Class should extend "Module", as it takes care of a few things for you. You can refer to /lib/module.php to see what it does and to either override a method or simply do your own class without extending.
	Module_my_module extends Module

= Languages =
If the module contains any displayed text, it should contain a "lang" folder for it to support different languages.
Files must be named with the language, such as "en.php" or "fr.php".
	File will be loaded automatically based on the app's lang config and passed to your module.
	If no file is found for chosen language, "en" will be default.
	If no "en.php" file is found as default, it will use the first file found in the folder.
The lang files must "return" an array of key-based string entries. Ex:
	return array(
		'welcome' => 'Bienvenue!',
		...
	);
Language strings will then be accessed through the "lang(key)" method.
	$this->lang('welcome')

= Config file=
The file must be within the "config" folder to be loaded automatically.
"config/default.php" is loaded by default.
User may load a different config file by setting a different name in the global app config for your module.
The config file must return an array:
	return array(
		'config_item' => 'config_value',
		...
	);
The config array will be accessible through your module class through the "config" var
	$this->config['config_item']

= CSS style =
If you have a "style.css" file in your root module folder, it will automatically be added to the head of the app.